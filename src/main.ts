import { createApp } from "vue";
import { Document } from "./data/document";
import { LzData } from "./data/lzdata";
import { Page } from "./data/page";
import { importDocument } from "./io/sketch/documentio";
import { preload } from "./preload";
import Navigation from "./components/Navigation.vue";
import PageView from "./components/PageView.vue"
import App from "./App.vue";
// import { parsePathString, path2curve, pathToAbsolute } from "./path/transform";
// import { pathIntersection } from "./path/intersect";
// import { union,difference,exclusion,intersection } from "./path/boolop";

preload.on('ready', (lzData: LzData) => {
    importDocument(lzData).then((core: Document) => {
        const selectPage = (index: number) => {
            core.getPageByIndex(index).then((page: Page) => {
                createApp(PageView, {data: page}).mount("#content");
            })
        }
        createApp(Navigation, {data: core, select: selectPage}).mount("#navigation");
        selectPage(0);
    })
});
createApp(App, {}).mount("#app");
preload.emit('load');


// const ps0 = "M144.85949918012662 92.50591693548387 L92.50371877298896 144.9076636451613 C89.68898488070741 147.72486880645164 89.68898488070741 152.27513119354842 92.50371877298896 155.09233635483872 L144.85949918012662 207.4940825806452 C147.67423311682944 210.31128774193553 152.22050410725532 210.31128774193553 155.03523794739021 207.4940825806452 L176.98726872445053 185.52277925806456 C179.508068437673 182.99976638709683 179.508068437673 178.90915432258066 176.98726872445053 176.38614154838712 C174.46646910779606 173.8631286774194 170.37944528820893 173.8631286774194 167.8586455749865 176.38614154838712 L151.21698679754448 193.04241096774197 C150.51640403804194 193.74360870967746 149.4531270966634 193.74360870967746 148.75254433716088 193.04241096774197 L106.94271392207132 151.19587325806455 C106.2421311625688 150.49467541935485 106.2421311625688 149.43046500000003 106.94271392207132 148.72926706451614 L148.75254433716088 106.88272935483872 C149.4531270966634 106.18153151612904 150.51640403804194 106.18153151612904 151.21698679754448 106.88272935483872 L167.8586455749865 123.53899887096776 C170.37944528820893 126.0620116451613 174.46646910779606 126.0620116451613 176.98726872445053 123.53899887096776 C179.508068437673 121.01598600000001 179.508068437673 116.92537393548389 176.98726872445053 114.40236106451614 L155.03765736098478 92.4334475516129 C152.21136646089255 89.67720789290323 147.6634331496549 89.69952125612903 144.85949918012662 92.50591693548387";
// const ps1 = "M144.85949918012662 92.50591693548387 L92.50371877298896 144.9076636451613 C89.68898488070741 147.72486880645164 89.68898488070741 152.27513119354842 92.50371877298896 155.09233635483872 L144.85949918012662 207.4940825806452 C147.67423311682944 210.31128774193553 152.22050410725532 210.31128774193553 155.03523794739021 207.4940825806452 L176.98726872445053 185.52277925806456 C179.508068437673 182.99976638709683 179.508068437673 178.90915432258066 176.98726872445053 176.38614154838712 C174.46646910779606 173.8631286774194 170.37944528820893 173.8631286774194 167.8586455749865 176.38614154838712 L151.21698679754448 193.04241096774197 C150.51640403804194 193.74360870967746 149.4531270966634 193.74360870967746 148.75254433716088 193.04241096774197 L106.94271392207132 151.19587325806455 C106.2421311625688 150.49467541935485 106.2421311625688 149.43046500000003 106.94271392207132 148.72926706451614 L148.75254433716088 106.88272935483872 C150.49697253716724 105.37631012903226 153.34319641553486 102.32509441935484 157.52288974369415 101.61146922580646 C160.62916398422345 101.08111567741936 164.02516536861862 102.24841432258066 167.71089409001559 105.1133654516129 C165.24675311479373 102.64705751612904 161.0223409039728 98.4204182419355 155.03765736098478 92.4334475516129 C152.21136646089255 89.67720789290323 147.6634331496549 89.69952125612903 144.85949918012662 92.50591693548387";

// console.log(ps0);
// const parsed0 = parsePathString(ps0);
// console.log("parsed0", parsed0);

// const abs0 = pathToAbsolute(parsed0);
// console.log("abs0", abs0);

// const curve0 = path2curve(abs0) as (string | number)[][];
// console.log("curve0", curve0);

// console.log(ps1);
// const parsed1 = parsePathString(ps1);
// console.log("parsed1", parsed1);

// const abs1 = pathToAbsolute(parsed1);
// console.log("abs1", abs1);

// const curve1 = path2curve(abs1) as (string | number)[][];
// console.log("curve1", curve1);

// const intersect = pathIntersection(curve0, curve1);
// console.log("intersect", intersect);

// const u = union(curve0, curve1);
// console.log("union", u);
// const d = difference(curve0, curve1);
// console.log("difference",d);
// const e = exclusion(curve0, curve1);
// console.log("exclusion", e);
// const i = intersection(curve0, curve1);
// console.log("intersection", i);

import { LessOp, Tree } from '@/basic/rbts/tree';
const rbt = new Tree();
console.log(rbt)